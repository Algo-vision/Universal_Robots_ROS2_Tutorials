<?xml version="1.0"?>
<robot name="my_dual_robot_cell" xmlns:xacro="http://ros.org/wiki/xacro">

  <!--First, include the macro from our custom description-->
  <xacro:include
    filename="$(find my_dual_robot_cell_description)/urdf/my_dual_robot_cell_macro.xacro" />
  <!--The driver already provides a control tag for the UR arm, we can directly include-->
  <!-- <xacro:include filename="$(find ur_description)/urdf/ur.ros2_control.xacro" /> -->

  <!--We need to specify the arguments used for parametrizing our description-->
  <xacro:arg name="robot2_ur_type" default="ur3" />
  <xacro:arg name="robot2_joint_limits_parameters_file" default="$(find ur_description)/config/$(arg robot2_ur_type)/joint_limits.yaml" />
  <xacro:arg name="robot2_kinematics_parameters_file" default="$(find ur_description)/config/$(arg robot2_ur_type)/default_kinematics.yaml" />
  <xacro:arg name="robot2_physical_parameters_file" default="$(find ur_description)/config/$(arg robot2_ur_type)/physical_parameters.yaml" />
  <xacro:arg name="robot2_visual_parameters_file" default="$(find ur_description)/config/$(arg robot2_ur_type)/visual_parameters.yaml" />

  <xacro:arg name="robot1_ur_type" default="ur3" />
  <xacro:arg name="robot1_joint_limits_parameters_file" default="$(find ur_description)/config/$(arg robot1_ur_type)/joint_limits.yaml" />
  <xacro:arg name="robot1_kinematics_parameters_file" default="$(find ur_description)/config/$(arg robot1_ur_type)/default_kinematics.yaml" />
  <xacro:arg name="robot1_physical_parameters_file" default="$(find ur_description)/config/$(arg robot1_ur_type)/physical_parameters.yaml" />
  <xacro:arg name="robot1_visual_parameters_file" default="$(find ur_description)/config/$(arg robot1_ur_type)/visual_parameters.yaml" />
  <xacro:arg name="robot2_use_mock_hardware" default="false" />
  <xacro:arg name="robot2_mock_sensor_commands" default="false" />
  <xacro:arg name="robot2_robot_ip" default="192.168.56.101" />
  <xacro:arg name="robot2_reverse_port" default="50006" />
  <xacro:arg name="robot2_script_sender_port" default="50007" />
  <xacro:arg name="robot2_script_command_port" default="50010" />
  <xacro:arg name="robot2_trajectory_port" default="50009" />

  <xacro:arg name="robot1_use_mock_hardware" default="false" />
  <xacro:arg name="robot1_mock_sensor_commands" default="false" />
  <xacro:arg name="robot1_robot_ip" default="192.168.56.102" />
  <xacro:arg name="robot1_reverse_port" default="50001" />
  <xacro:arg name="robot1_script_sender_port" default="50002" />
  <xacro:arg name="robot1_script_command_port" default="50004" />
  <xacro:arg name="robot1_trajectory_port" default="50003" />

  <xacro:arg name="headless_mode" default="false" />
  <xacro:arg name="ur_script_filename" default="$(find ur_client_library)/resources/external_control.urscript" />
  <xacro:arg name="ur_output_recipe_filename" default="$(find ur_robot_driver)/resources/rtde_output_recipe.txt" />
  <xacro:arg name="ur_input_recipe_filename" default="$(find ur_robot_driver)/resources/rtde_input_recipe.txt" /> 


  <link name="world" />

  <xacro:my_dual_robot_cell
    parent="world"
    robot2_ur_type="$(arg robot2_ur_type)"
    robot2_joint_limits_parameters_file="$(arg robot2_joint_limits_parameters_file)"
    robot2_kinematics_parameters_file="$(arg robot2_kinematics_parameters_file)"
    robot2_physical_parameters_file="$(arg robot2_physical_parameters_file)"
    robot2_visual_parameters_file="$(arg robot2_visual_parameters_file)"
    robot2_robot_ip="$(arg robot2_robot_ip)"
    robot2_reverse_port="$(arg robot2_reverse_port)"
    robot2_script_sender_port ="$(arg robot2_script_sender_port)"
    robot2_script_command_port="$(arg robot2_script_command_port)"
    robot2_trajectory_port="$(arg robot2_trajectory_port)"

    robot1_ur_type="$(arg robot1_ur_type)"
    robot1_joint_limits_parameters_file="$(arg robot1_joint_limits_parameters_file)"
    robot1_kinematics_parameters_file="$(arg robot1_kinematics_parameters_file)"
    robot1_physical_parameters_file="$(arg robot1_physical_parameters_file)"
    robot1_visual_parameters_file="$(arg robot1_visual_parameters_file)"
    robot1_robot_ip="$(arg robot1_robot_ip)"
    robot1_reverse_port="$(arg robot1_reverse_port)"
    robot1_script_sender_port ="$(arg robot1_script_sender_port)"
    robot1_script_command_port="$(arg robot1_script_command_port)"
    robot1_trajectory_port="$(arg robot1_trajectory_port)"


    script_filename="$(arg ur_script_filename)"
    output_recipe_filename="$(arg ur_output_recipe_filename)"
    input_recipe_filename="$(arg ur_input_recipe_filename)"
    headless_mode="$(arg headless_mode)"
  >
    <origin xyz="0 0 1" rpy="0 0 0" />
  </xacro:my_dual_robot_cell>

  <!-- <xacro:ur_ros2_control
    name="robot2"
    tf_prefix="robot2_"
    robot_ip="$(arg robot2_robot_ip)"
    script_filename="$(arg ur_script_filename)"
    output_recipe_filename="$(arg ur_output_recipe_filename)"
    input_recipe_filename="$(arg ur_input_recipe_filename)"
    headless_mode="$(arg headless_mode)"
    reverse_port="$(arg robot2_reverse_port)"
    script_sender_port="$(arg robot2_script_sender_port)"
    script_command_port="$(arg robot2_script_command_port)"
    trajectory_port="$(arg robot2_trajectory_port)"
  />

  <xacro:ur_ros2_control
    name="robot1"
    tf_prefix="robot1_"
    robot_ip="$(arg robot1_robot_ip)"
    script_filename="$(arg ur_script_filename)"
    output_recipe_filename="$(arg ur_output_recipe_filename)"
    input_recipe_filename="$(arg ur_input_recipe_filename)"
    headless_mode="$(arg headless_mode)"
    reverse_port="$(arg robot1_reverse_port)"
    script_sender_port="$(arg robot1_script_sender_port)"
    script_command_port="$(arg robot1_script_command_port)"
    trajectory_port="$(arg robot1_trajectory_port)"
  />

  <xacro:ur_ros2_control
        name="${name}"
        use_fake_hardware="${use_fake_hardware}"
        initial_positions="${initial_positions}"
        fake_sensor_commands="${fake_sensor_commands}"
        headless_mode="${headless_mode}"
        sim_gazebo="${sim_gazebo}"
        sim_ignition="${sim_ignition}"
        script_filename="$(arg ur_script_filename)"
        output_recipe_filename="${output_recipe_filename}"
        input_recipe_filename="${input_recipe_filename}"
        tf_prefix="robot1_"
        hash_kinematics="${kinematics_hash}"
        robot_ip="$(arg robot1_robot_ip)"
        use_tool_communication="${use_tool_communication}"
        tool_voltage="${tool_voltage}"
        tool_parity="${tool_parity}"
        tool_baud_rate="${tool_baud_rate}"
        tool_stop_bits="${tool_stop_bits}"
        tool_rx_idle_chars="${tool_rx_idle_chars}"
        tool_tx_idle_chars="${tool_tx_idle_chars}"
        tool_device_name="${tool_device_name}"
        tool_tcp_port="${tool_tcp_port}"
        reverse_port="${reverse_port}"
        script_sender_port="${script_sender_port}"
        reverse_ip="${reverse_ip}"
        script_command_port="${script_command_port}"
        trajectory_port="${trajectory_port}"
        non_blocking_read="${non_blocking_read}"
        keep_alive_count="${keep_alive_count}"
        /> -->

</robot>